# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type UserSurvey {
  id: ID!
  user: User!
  survey: Survey!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  answers: [Answer!]!
  userSurveys: [UserSurvey!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type SurveyAnswer {
  id: ID!
  survey: Survey!
  answer: Answer!
}

type Answer {
  id: ID!
  user: User!
  question: Question!
  surveyAnswers: [SurveyAnswer!]!
  answerOptions: [AnswerOption!]!
  textResponse: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AnswerOption {
  id: ID!
  answer: Answer!
  option: Option!
}

type Option {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  question: Question!
  answerOptions: [AnswerOption!]!
}

type Question {
  id: ID!
  text: String!
  type: QuestionType!
  createdAt: DateTime!
  updatedAt: DateTime!
  survey: [Survey!]!
  options: [Option!]
  answers: [Answer!]!
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  OPEN_ENDED
}

type Survey {
  id: ID!
  title: String!
  description: String
  isPublic: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  questions: [Question!]!
  userSurveys: [UserSurvey!]!
  surveyAnswers: [SurveyAnswer!]!
}

type OptionStats {
  id: ID!
  text: String!
  responseCount: Float!
}

type QuestionStats {
  id: ID!
  text: String!
  options: [OptionStats!]!
}

type SurveyStats {
  totalResponses: Float!
  uniqueRespondents: Float!
  questions: [QuestionStats!]!
}

type LoginResponse {
  accessToken: String!
}

type Query {
  getAllSurveys: [Survey!]!
  getSurvey(id: ID!): Survey!
  getPublicSurveys: [Survey!]!
  getPrivateSurveys: [Survey!]!
  getMySurveys: [Survey!]!
  getSurveyStats(surveyId: ID!): SurveyStats!
  user: User!
}

type Mutation {
  toggleSurveyVisibility(id: ID!, isPublic: Boolean!): Survey!
  createSurvey(title: String!, description: String, questions: [CreateQuestionInput!]!): Survey!
  submitAnswers(answers: [AnswerInput!]!): [Answer!]!
  registerUser(name: String!, email: String!, password: String!): User!
  login(email: String!, password: String!): LoginResponse!
  logout: Boolean!
}

input CreateQuestionInput {
  text: String!
  type: QuestionType!
  options: [CreateOptionInput!]
}

input CreateOptionInput {
  text: String!
}

input AnswerInput {
  surveyId: Int!
  questionId: Int!
  optionIds: [Int!]
  textResponse: String
  userId: Int!
}